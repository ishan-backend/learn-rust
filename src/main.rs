#![allow(unused)] // ignores unused vars at compile time

use std::{f32, io, usize};
use std::io::{Write, BufRead, BufReader, ErrorKind};
use std::fs::File;
use std::cmp::Ordering;
use rand::Rng;

fn main() {
    println!("What is your name?");
    let mut name: String = String::new();
    io::stdin().read_line(&mut name).expect("didn't receive input"); // &mut -> directly saves value entered to name; read_line() returns enum
    // enum has fixed number of possible values, ok / error; error handling is built into rust using expect()
    // handling this error can be done too...

    let greeting: &str = "Nice to meet you!!";

    println!("Hello! {}!, {}", name.trim_end(), greeting); // {} is used to pass values directly; trim_end() removes newline char from end of name string

    // vars
    const ONE_MIL: u32 = 1_000_000;
    const PI: f32 = std::f32::consts::PI;
    let age: &str = "23";
    let mut age: u32 = age.trim().parse().expect("age wasn't assigned a number"); // building error handling directly as we code
    age = age + 1;
    println!("I'm {} age and I have money $ {}", age, ONE_MIL);

    // rust is statically typed; all types must be defined; may be auto-generated by compiler for you or explicit declaration if required
    println!("Max u32: {}", u32::MAX);
    println!("Max u64: {}", u64::MAX);
    println!("Max u128: {}", u128::MAX);
    println!("Max usize: {}", usize::MAX);
    println!("Max f32: {}", f32::MAX);
    println!("Max f64: {}", f64::MAX);

    // if you have a variable that will be unused and you want rust compiler to ignore it, start with _
    let _is_true: bool = true;
    let my_cs_grade: char = 'A';
    let random_num = rand::thread_rng().gen_range(1..101); // [1, 100]
    println!("Random number: {}", random_num);

    // if-else
    if(age >= 18) && (age <= 60) {
        println!("not your retirement age");
    } else if (age >= 61) {
        println!("vacation");
    } else {
        println!("little you are!!");
    }

    // ternary
    let can_vote = if age >= 18 {true} else {false};
    println!("can vote?: {} ", can_vote);

    // match - runs different code depending on conditions
    let current_age: i32 = 23;
    match current_age {
        0..=18 => println!("you are young buddy !!"),
        19..=60 => println!("time to work !!"),
        61 | 22 => println!("party year !!"),
        62..=74 => println!("party year !!"),
        75..=i32::MAX => println!("bonus life !!"),
        _ => println!("not an important birthday !!")// match everthing else for current_age, helps you avoid errors
    }

}
